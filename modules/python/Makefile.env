PY_PIPENV:=$(shell which pipenv 2>/dev/null)

ifneq ($(PY_PIPENV),)
	ifneq ($(WORKON_HOME),)
		# If WORKON_HOME is set, assume we're going to create ".venv" next to the Pipfile.
		PIPENV := PIPENV_VENV_IN_PROJECT= WORKON_HOME='$(WORKON_HOME)' $(PY_PIPENV)
	else ifneq ($(VIRTUAL_ENV),)
		# If VIRTUAL_ENV is set, we are already in a virtualenv (probably created by CI or activated by the developer)
		PIPENV := $(PY_PIPENV)
	else
		PIPENV := PIPENV_VENV_IN_PROJECT=1 $(PY_PIPENV)
	endif
	PIPENV_RUN := $(PIPENV) run
	# Backwards compatible alias.
	WITH_PIPENV := $(PIPENV_RUN)

	# Get the directory where the Pipfile is.
	PIPENV_PIPFILE_DIR := $(shell $(PIPENV) --where 2> /dev/null)

	ifneq ($(PIPENV_PIPFILE_DIR),)
		# Check if the venv exists yet.
		PY_VENV := $(shell $(PIPENV) --venv 2> /dev/null)

		ifneq ($(.SHELLSTATUS),0)
			# The venv doesn't exist yet.
			ifneq ($(WORKON_HOME),)
				# Create the venv, then check for it's location again.
				_ := $(shell $(PIPENV_RUN) install --dev --deploy)
				PY_VENV := $(shell $(PIPENV) --venv 2> /dev/null)
			else ifneq ($(VIRTUAL_ENV),)
				# Do nothing, since we were in a virtualenv, we should use the value already set to PY_VENV
				PY_VENV ?=
			else
				# Again, assume we're going to create ".venv" next to the Pipfile.
				PY_VENV := $(PIPENV_PIPFILE_DIR)/.venv
			endif
		endif
	endif
endif

.PHONY: pipenv/check
## Test that pipenv is in PATH.
pipenv/check: python/check
	$(call assert-set,PY_PIPENV)
	@echo "Found pipenv: $(PY_PIPENV)"

.PHONY: pipenv/debug
## Print build-harness vars about pipenv.
pipenv/debug: python/debug
	$(call print-var,PY_PIPENV)
	$(call print-var,WORKON_HOME)
	$(call print-var,VIRTUAL_ENV)
	$(call print-var,PIPENV)
	$(call print-var,PIPENV_PIPFILE_DIR)
	$(call print-var,PY_VENV)
	$(PIPENV) --venv 2> /dev/null
	$(call print-var,PIPENV_RUN)

$(PIPENV_PIPFILE_DIR)/Pipfile.lock: $(PIPENV_PIPFILE_DIR)/Pipfile
	$(call assert-set,PIPENV_PIPFILE_DIR)
	@$(MAKE) pipenv/lock

$(PY_VENV)/bin/activate: $(PIPENV_PIPFILE_DIR)/Pipfile.lock
	$(call assert-set,PIPENV_PIPFILE_DIR)
	$(PIPENV) install --dev --deploy
	touch $@

$(PY_VENV): $(PY_VENV)/bin/activate

.PHONY: pipenv
## Install and activate a virtual environment using pipenv
pipenv: pipenv/check $(PY_VENV)

.PHONY: pipenv/lock
## Lock dependencies
pipenv/lock:
	$(call assert-set,PIPENV_PIPFILE_DIR)
	$(PIPENV) lock

.PHONY: pipenv/clean
## Remove development virtualenv
pipenv/clean:
	$(call assert-set,PIPENV_PIPFILE_DIR)
	$(PIPENV) --rm || true

.PHONY: pipenv/generate_requirements
## Generate requirements files based on a Pipfile
pipenv/generate_requirements: $(PIPENV_PIPFILE_DIR)/requirements.txt $(PIPENV_PIPFILE_DIR)/requirements-dev.txt

define py-generate-requirements
from pipenv.project import Project; section = "$(1)"; reqs = {package: (ver["version"] if isinstance(ver, dict) else ver) for package, ver in Project().parsed_pipfile[section].items()}; fd = open("$(2).txt", mode="w"); fd.writelines((r if reqs[r] == "*" else "{} {}".format(r, reqs[r])) + "\n" for r in reqs.keys()); fd.close()
endef

$(PIPENV_PIPFILE_DIR)/requirements.txt: $(PIPENV_PIPFILE_DIR)/Pipfile
	$(call assert-set,PIPENV_PIPFILE_DIR)
	@echo "Writing requirements from Pipfile to requirements.txt"
	@$(DOCKER) run --rm --mount type=bind,src=$$(pwd),dst=/app kennethreitz/pipenv python3 -c '$(call py-generate-requirements,packages,requirements)'

$(PIPENV_PIPFILE_DIR)/requirements-dev.txt: $(PIPENV_PIPFILE_DIR)/Pipfile
	$(call assert-set,PIPENV_PIPFILE_DIR)
	@echo "Writing dev requirements from Pipfile to requirements-dev.txt"
	@$(DOCKER) run --rm --mount type=bind,src=$$(pwd),dst=/app kennethreitz/pipenv python3 -c '$(call py-generate-requirements,dev-packages,requirements-dev)'

# The requirements*.txt files will be next to the Pipfile.
# If setup.py and Pipfile are in separate directories, create symlinks.
requirements.txt: $(PIPENV_PIPFILE_DIR)/requirements.txt
	$(call assert-set,PIPENV_PIPFILE_DIR)
	@test -f requirements.txt || ln -sf $(PIPENV_PIPFILE_DIR)/requirements.txt requirements.txt
requirements-dev.txt: $(PIPENV_PIPFILE_DIR)/requirements-dev.txt
	$(call assert-set,PIPENV_PIPFILE_DIR)
	@test -f requirements-dev.txt || ln -sf $(PIPENV_PIPFILE_DIR)/requirements-dev.txt requirements-dev.txt
