BANDIT=$(call which,bandit)
BANDIT_FLAGS=-ll -ii
SAFETY_FLAGS=check

PYTHON_SECURITY_TARGETS?=$(shell find . $(PYTHON_TARGETS_FIND_FLAGS) -not -path "*/tests/*" -not -path "*/docs/*" -not -name "setup.py")


.PHONY: python/scan/targets
python/scan/targets:
	@VAR=( $(PYTHON_SECURITY_TARGETS) ); echo "Discovered $${#VAR[@]} files:"
	@echo "$$(echo $(PYTHON_SECURITY_TARGETS) | tr ' ' '\n')"

.PHONY: python/scan/announce/%
python/scan/announce/%:
		@VAR=( $(PYTHON_SECURITY_TARGETS) ); echo "Scanning $${#VAR[@]} files with $*..."

.PHONY: python/bandit
## Scan python files for security vulnerabilities with bandit
python/bandit: bh/venv
	$(call assert-set,BANDIT)
	@$(MAKE) python/scan/announce/bandit
	@$(BANDIT) $(PYTHON_SECURITY_TARGETS) $(BANDIT_FLAGS)


.PHONY: python/safety
## Scan python project for security vulnerabilities with safety
python/safety: Pipfile.lock
	@$(MAKE) python/scan/announce/safety
	@$(DOCKER) run -i --rm stedolan/jq -r <Pipfile.lock '.default | to_entries[] | .key + .value.version' | $(DOCKER) run -i --rm pyupio/safety safety $(SAFETY_FLAGS) --stdin


.PHONY: python/scan
## Scan python files for security vulnerabilities
python/scan: bh/venv
	@$(MAKE) python/scan/targets python/bandit python/safety
	@echo "Done."
